#!/bin/bash
# Copyright 2020-present Open Networking Foundation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Poor-man's tool to tag a release by the following:
#   1) build the docker image via 'make images'
#   2) tag the current commit with the specified version tag
#   3) push the docker image(s) up with the specified version tag

# The tool requires the user to have the authorization to:
#   1) push tag to the upstream repo
#   2) publish docker image to dockerhub

# Also, the following conditions must be met:
#   1) repo must have upstream (or origin) remote push enabled via ssh
#   2) git tag does not already exist
#   3) non-empty version number is specified
#   4) user is logged in to dockerhub
#   5) following the build all images must exist in the local docker image cache

set -e -u -o pipefail

dry_run=${DRY_RUN:-"0"}
version="${1}"
shift 1

# Validate args...
[ -z "$version" ] && echo "usage: $(dirname $0) <version> [<docker-image>...]" >&2 && exit 1

# Validate upstream (or origin) push URL is via SSH...
if [ "${dry_run}" == "0" ]; then
  git remote -v | grep upstream | grep -q push && upstream="upstream" || upstream="origin"
  ! git remote -v | grep $upstream | grep push | cut -f2 | cut -d\  -f1 | grep -q 'git@github.com:' && \
      echo "Upstream remote not setup with SSH push URL" >&2 && exit 1
fi

# Validate we are on master
! git status -b | grep "On branch" | cut -d\  -f3 | grep -q master && \
      echo "Not on master branch" >&2 && exit 1

! git status -b | grep -q "nothing to commit, working tree clean" && \
      echo "There are modified files" >&2 && git status && exit 1

# Validate tag does not already exist
git tag | grep -q $version && echo "Tag $version already exists" >&2 && exit 1

if [ $# -gt 0 ]; then
  if [ "${dry_run}" == "0" ]; then
    # Validate docker logins...
    ! egrep -q '"auths": {$' ~/.docker/config.json && echo "Not logged in to dockerhub!" >&2 && exit 1
  fi

  # 1) Make images
  make images || exit 1

  # 1a) Validate that each docker image exists
  for image in "$@"; do
    id=$(docker images $image:latest -q)
    [ -z "$id" ] && echo "Docker image $image:latest does not exist!" && exit 1
  done
else
  make || exit 1
fi

# 2) Push the specified version tag to upstream (or origin) repo
echo "Tagging sources with $version..."
git tag $version

if [ "${dry_run}" == "0" ]; then
  echo "Pushing $version tag to $upstream..."
  git push $upstream $version
else
  echo "Skipping tag push of $version"
fi

if [ $# -gt 0 ]; then
  # 3) Push each docker image to docker hub; assumed docker login was already run
  for image in "$@"; do
    echo "Publishing image $image..."
    id=$(docker images $image:latest -q)
    docker tag $id $image:$version
    if [ "${dry_run}" == "0" ]; then
      docker push $image:$version
    else
      echo "Skipping push of image $image"
    fi
  done
fi
