#!/usr/bin/env bash

# Copyright 2018-present Open Networking Foundation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -eux -o pipefail

if [ -z ${1+x} ]; then
    echo Usage: patch-models updated-component chart-file
    exit 1
fi

component_name=$1
chart_file=$2

declare -a aliasCharts=("config-model" "aether-roc-gui" "sdcore-adapter")

pattern=$(printf "|%s" "${aliasCharts[@]}")
pattern=${pattern:1}
grep alias: "$chart_file" | grep -qE $pattern || exit 0

top=`pwd`
cd staging/onos-helm-charts/
tgz_file=$(ls ${component_name}/*.tgz)
tgz_file=${tgz_file##*/}
tar xf ${component_name}/*.tgz
rm ${component_name}/*.tgz
cd ${component_name}

entries=$(yq e '.dependencies | length' "$chart_file")
length=$((entries - 1))

for i in $(seq 0 $length)
do
    name=""
    repository=""
    version=""
    alias=""

    dep=$(yq e .dependencies[$i] "$chart_file")

    attrs=(${dep//: / })
    attr_count=(${#attrs[@]})

    attr_count=$((attr_count / 2))
    attr_count=$((attr_count - 1))
    for j in $(seq 0 $attr_count)
    do
        attr_key_index=$((j * 2))
        attr_value_index=$((attr_key_index + 1))
        key="${attrs[attr_key_index]}"
        if [ "$key" == "name" ]
        then
            name="${attrs[attr_value_index]}"
        elif [ "$key" == "repository" ]
        then
            repository="${attrs[attr_value_index]}"
        elif [ "$key" == "version" ]
        then
            version="${attrs[attr_value_index]}"
        elif [ "$key" == "alias" ]
        then
            alias="${attrs[attr_value_index]}"
        fi
    done

    found_one="0"
    for a in ${aliasCharts[@]}; do
        if [[ "$alias" == *"$a"* ]]; then
            found_one="1"
        fi
    done
    if [ $found_one == "1" ] ; then
        chart_tgz="${top}/${component_name}/charts/$name-$version.tgz"
        dash_alias="${alias//./-}"
        stage_dir="charts/$dash_alias"
        mkdir -p "$stage_dir"
        pushd $stage_dir
        tar xvf $chart_tgz
        mv $name/* $name/.* . || true
        rmdir "$name"
        popd
        rm -rf charts/$name
    fi
done

cd .. && tar cvzf ${tgz_file} ${component_name}
rm -rf ${component_name}/* ${component_name}/.gitignore
mv ${tgz_file} ${component_name}/
